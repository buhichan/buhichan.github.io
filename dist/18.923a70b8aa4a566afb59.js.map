{"version":3,"sources":["webpack:///./src/routes/shogi/interfaces.ts","webpack:///./src/routes/shogi/koma.ts","webpack:///./src/routes/shogi/board.ts","webpack:///./src/routes/shogi/index.tsx"],"names":["Faction","MAX_SIZE","Coord","x","y","c","this","KomaKind","MoveKind","MoveResult","UpgradeOption","MoveMove","koma","from","to","MoveEat","MoveUchikomu","Koma","faction","board","getUpgradeThreshold","coord","Ou","makeMovesInLine","start","offsetx","offsety","moves","px","py","loop","console","error","newCoord","move","createMove","push","a","b","left","top","bottom","right","topleft","topright","bottomleft","bottomright","filter","kind","CannotUpgrade","王将","玉将","MayUpgrade","飞车","龙王","角行","龙马","金将","银将","成银","direction","upgradeThreshold","MustUpgrade","桂马","成桂","threshold","香车","成香","isNotOnLastLine","doesNotHaveSameColumnFuhyou","Array","fill","every","_","i","getKoma","步兵","attacked","cannotCheckmate","成步","komadai","Gyou","splice","Error","downgrade","getPossibleUpgrade","mayUpgrade","moveKoma","killed","killKoma","KO","uchikomud","komaIndex","findIndex","upgrade","upgradeKoma","Nothing","target","CELL_WIDTH","Math","min","window","innerWidth","Shogi","props","selected","setSelected","setMoves","init","turn","setTurn","_a","_b","uchikomu","setUchiKomu","refresh","style","width","map","revI","key","display","j","legalMove","canUchiKomu","find","eq","onClick","performMove","alert","confirm","getPossibleMoves","border","cursor","height","transform","undefined","justifyContent","alignItems","color","background","KomaDisplay","name","viewBox","stroke","d","textAnchor","fontSize"],"mappings":"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","file":"18.923a70b8aa4a566afb59.js","sourcesContent":["import { Koma } from \"./koma\";\n\nexport enum Faction {\n    Ou,\n    Gyou,\n}\n\nexport const MAX_SIZE = 9;\n\nexport class Coord {\n    private constructor(public x:number, public y:number){\n        \n    }\n    static newCoord(x: number, y: number){\n        if(x < 0 || x >= MAX_SIZE || y < 0 || x >= MAX_SIZE){\n            return null\n        }else{\n            return new Coord(x, y)\n        }\n    }\n    eq(c: Coord){\n        return c.x === this.x && c.y === this.y\n    }\n    topleft(){\n        return new Coord(this.x - 1, this.y + 1)\n    }\n    topright(){\n        return new Coord(this.x + 1, this.y + 1)\n    }\n    bottomleft(){\n        return new Coord(this.x - 1, this.y - 1)\n    }\n    bottomright(){\n        return new Coord(this.x + 1, this.y - 1)\n    }\n    top(){\n        return new Coord(this.x, this.y + 1)\n    }\n    left(){\n        return new Coord(this.x - 1, this.y)\n    }\n    right(){\n        return new Coord(this.x + 1, this.y)\n    }\n    bottom(){\n        return new Coord(this.x, this.y - 1)\n    }\n}\n\nexport enum KomaKind {\n    飞车,\n    龙王,\n\n    王将,\n    玉将,\n    \n    角行,\n    龙马,\n\n    香车,\n    成香,\n\n    银将,\n    成银,\n    \n    金将,\n    \n    桂马,\n    成桂,\n    \n    步兵,\n    成步,\n}\n\nexport enum MoveKind {\n    Eat,\n    Move,\n    Uchikomu,\n}\n\nexport abstract class Move {\n    constructor(public koma: Koma, public from:Coord, public to: Coord){}\n}\n\nexport class MoveMove {\n    constructor(public koma: Koma, public from:Coord, public to: Coord){}\n}\n\nexport class MoveEat {\n    constructor(public koma: Koma, public from:Coord, public to: Coord){}\n}\n\nexport class MoveUchikomu {\n    constructor(public koma: Koma, public from:Coord, public to: Coord){}\n}\n\nexport enum MoveResult {\n    MayUpgrade,\n    KO,\n    Nothing,\n}\n\nexport enum UpgradeOption {\n    CannotUpgrade,\n    MustUpgrade,\n    MayUpgrade\n}","import { Board } from \"./board\";\nimport { Coord, Faction, KomaKind, Move, MoveKind, UpgradeOption, MAX_SIZE, MoveEat } from \"./interfaces\";\n\nexport abstract class Koma {\n    constructor(public faction:Faction){}\n    abstract getPossibleMoves(from: Coord, board: Board): Move[]\n    abstract getPossibleUpgrade(currentCoord: Coord): {kind: UpgradeOption, to?: Koma }\n    downgrade(): Koma {\n        return this\n    }\n    canUchiKomu(to: Coord, board: Board): boolean {\n        return true\n    }\n    abstract get name():string\n    abstract get kind(): KomaKind\n}\n\nfunction getUpgradeThreshold(faction: Faction, coord:Coord): number {\n    return (faction === Faction.Ou ? ( MAX_SIZE - coord.y ) : coord.y + 1)\n}\n\nfunction makeMovesInLine(board:Board, koma:Koma, start:Coord, offsetx:number, offsety:number){\n    let moves = []\n    let px = start.x\n    let py = start.y\n    let loop = 1000\n    while(1){\n        loop -- \n        if(loop === 0){\n            console.error(\"Infinite loop\")\n            break;\n        }\n        px = px + offsetx\n        py = py + offsety\n        const coord = Coord.newCoord(px,py)\n        if(!coord){\n            break\n        }else{\n            const move = board.createMove(koma, start, coord);\n            if( !move ){\n                break //furthur moves are blocked by friendly or \n            }\n            if( move instanceof MoveEat ){\n                moves.push(move)\n                break\n            }\n            moves.push(move)\n        }\n    }\n    return moves\n}\n\nexport class Oushou extends Koma {\n    getPossibleMoves(a: Coord, b: Board): Move[] {\n        return [\n            b.createMove(this, a, a.left()),\n            b.createMove(this, a, a.top()),\n            b.createMove(this, a, a.bottom()),\n            b.createMove(this, a, a.right()),\n            b.createMove(this, a, a.topleft()),\n            b.createMove(this, a, a.topright()),\n            b.createMove(this, a, a.bottomleft()),\n            b.createMove(this, a, a.bottomright()),\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(){\n        return { kind: UpgradeOption.CannotUpgrade }\n    }\n    canUchiKomu(){\n        return false\n    }\n    get kind(){\n        return this.faction === Faction.Ou ? KomaKind.王将 : KomaKind.玉将\n    }\n    get name(){\n        return this.faction === Faction.Ou ? \"王将\" : \"玉将\"\n    }\n}\n\nexport class Hisha extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            ...makeMovesInLine(b, this, a, 0, 1),\n            ...makeMovesInLine(b, this, a, 0, -1),\n            ...makeMovesInLine(b, this, a, 1, 0),\n            ...makeMovesInLine(b, this, a, -1, 0),\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(coord){\n        if( getUpgradeThreshold(this.faction, coord) <= 3 ){\n            return { kind: UpgradeOption.MayUpgrade, to: new Ryuou(this.faction) }\n        }else{\n            return { kind: UpgradeOption.CannotUpgrade }\n        }\n    }\n    get kind(){\n        return KomaKind.飞车\n    }\n    get name(){\n        return \"飞车\"\n    }\n}\n\nexport class Ryuou extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            ...makeMovesInLine(b, this, a, 0, 1),\n            ...makeMovesInLine(b, this, a, 0, -1),\n            ...makeMovesInLine(b, this, a, 1, 0),\n            ...makeMovesInLine(b, this, a, -1, 0),\n            b.createMove(this, a, a.topleft()),\n            b.createMove(this, a, a.topright()),\n            b.createMove(this, a, a.bottomleft()),\n            b.createMove(this, a, a.bottomright()),\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(){\n        return { kind: UpgradeOption.CannotUpgrade }\n    }\n    downgrade(){\n        return new Hisha(this.faction)\n    }\n    get kind(){\n        return KomaKind.龙王\n    }\n    get name(){\n        return \"龙王\"\n    }\n}\n\nexport class Kakugyou extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            ...makeMovesInLine(b, this, a, 1, -1),\n            ...makeMovesInLine(b, this, a, -1, 1),\n            ...makeMovesInLine(b, this, a, 1, 1),\n            ...makeMovesInLine(b, this, a, -1, -1),\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(coord){\n        if(getUpgradeThreshold(this.faction, coord) <= 3){\n            return { kind: UpgradeOption.MayUpgrade, to: new Ryuba(this.faction) }\n        }else{\n            return { kind: UpgradeOption.CannotUpgrade }\n        }\n    }\n    get kind(){\n        return KomaKind.角行\n    }\n    get name(){\n        return \"角行\"\n    }\n}\n\nexport class Ryuba extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            ...makeMovesInLine(b, this, a, 1, -1),\n            ...makeMovesInLine(b, this, a, -1, 1),\n            ...makeMovesInLine(b, this, a, 1, 1),\n            ...makeMovesInLine(b, this, a, -1, -1),\n            b.createMove(this, a, a.top()),\n            b.createMove(this, a, a.right()),\n            b.createMove(this, a, a.left()),\n            b.createMove(this, a, a.bottom()),\n        ].filter(x=>x !== null) as Move[]\n    }\n    downgrade(){\n        return new Kakugyou(this.faction)\n    }\n    getPossibleUpgrade(coord){\n        return { kind: UpgradeOption.CannotUpgrade }\n    }\n    get kind(){\n        return KomaKind.龙马\n    }\n    get name(){\n        return \"龙马\"\n    }\n}\n\nexport class Kinshou extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            b.createMove(this, a, a.top()),\n            b.createMove(this, a, a.right()),\n            b.createMove(this, a, a.left()),\n            b.createMove(this, a, a.bottom()),\n            ...this.faction === Faction.Ou ? [\n                b.createMove(this, a, a.topleft()),\n                b.createMove(this, a, a.topright()),\n            ] : [\n                b.createMove(this, a, a.bottomleft()),\n                b.createMove(this, a, a.bottomright()),\n            ]\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(){\n        return { kind: UpgradeOption.CannotUpgrade }\n    }\n    get kind(){\n        return KomaKind.金将\n    }\n    get name(){\n        return \"金将\"\n    }\n}\n\nexport class Ginshou extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            b.createMove(this, a, a.topleft()),\n            b.createMove(this, a, a.topright()),\n            b.createMove(this, a, a.bottomleft()),\n            b.createMove(this, a, a.bottomright()),\n            ...this.faction === Faction.Ou ? [\n                b.createMove(this, a, a.top()),\n            ] : [\n                b.createMove(this, a, a.bottom()),\n            ]\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(coord){\n        if(getUpgradeThreshold(this.faction, coord) <= 3){\n            return { kind: UpgradeOption.MayUpgrade, to: new Narigin(this.faction) }\n        }else{\n            return { kind: UpgradeOption.CannotUpgrade }\n        }\n    }\n    get kind(){\n        return KomaKind.银将\n    }\n    get name(){\n        return \"银将\"\n    }\n}\n\nexport class Narigin extends Kinshou {\n    get kind(){\n        return KomaKind.成银\n    }\n    downgrade(){\n        return new Ginshou(this.faction)\n    }\n    get name(){\n        return \"成银\"\n    }\n}\n\nexport class Keiba extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        let direction = this.faction === Faction.Ou ? 1 : -1\n        return [\n            b.createMove(this, a, Coord.newCoord(a.x-1, a.y + 2 * direction)),\n            b.createMove(this, a, Coord.newCoord(a.x+1, a.y + 2 * direction)),\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(coord){\n        const upgradeThreshold = getUpgradeThreshold(this.faction, coord);\n        if( upgradeThreshold <= 2 ){\n            return { kind: UpgradeOption.MustUpgrade, to: new Narikei(this.faction) }\n        }else if(upgradeThreshold <= 3){\n            return { kind: UpgradeOption.MayUpgrade, to: new Narikei(this.faction) }\n        }else{\n            return { kind: UpgradeOption.CannotUpgrade }\n        }\n    }\n    canUchiKomu(to:Coord){\n        return this.faction === Faction.Ou ? to.y <= MAX_SIZE - 3 : to.y >= 2\n    }\n    get kind(){\n        return KomaKind.桂马\n    }\n    get name(){\n        return \"桂马\"\n    }\n}\n\nexport class Narikei extends Kinshou {\n    get kind(){\n        return KomaKind.成桂\n    }\n    downgrade(){\n        return new Keiba(this.faction)\n    }\n    get name(){\n        return \"成桂\"\n    }\n}\n\nexport class Kyousha extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        let direction = this.faction === Faction.Ou ? 1 : -1\n        return [\n            ...makeMovesInLine(b, this, a, 0, direction),\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(coord){\n        const threshold = getUpgradeThreshold(this.faction, coord)\n        if(threshold <= 1){\n            return { kind: UpgradeOption.MustUpgrade, to: new Narikyou(this.faction) }\n        }else if(threshold <= 3){\n            return { kind: UpgradeOption.MayUpgrade, to: new Narikyou(this.faction) }\n        }{\n            return { kind: UpgradeOption.CannotUpgrade }\n        }\n    }\n    canUchiKomu(to:Coord){\n        return this.faction === Faction.Ou ? to.y <= MAX_SIZE - 2 : to.y >= 1\n    }\n    get kind(){\n        return KomaKind.香车\n    }\n    get name(){\n        return \"香车\"\n    }\n}\n\nexport class Narikyou extends Kinshou {\n    get kind(){\n        return KomaKind.成香\n    }\n    downgrade(){\n        return new Kyousha(this.faction)\n    }\n    get name(){\n        return \"成香\"\n    }\n}\n\nexport class Fuhyou extends Koma {\n    getPossibleMoves(a: Coord, b: Board){\n        return [\n            b.createMove(this, a, this.faction === Faction.Ou ? a.top() : a.bottom() )\n        ].filter(x=>x !== null) as Move[]\n    }\n    getPossibleUpgrade(coord){\n        if(getUpgradeThreshold(this.faction, coord) <= 1){\n            return { kind: UpgradeOption.MustUpgrade, to: new Narito(this.faction) }\n        }else if(getUpgradeThreshold(this.faction, coord) <= 3){\n            return { kind: UpgradeOption.MayUpgrade, to: new Narito(this.faction) }\n        }else{\n            return { kind: UpgradeOption.CannotUpgrade }\n        }\n    }\n    canUchiKomu(to:Coord, board: Board){\n        const isNotOnLastLine = this.faction === Faction.Ou ? to.y <= MAX_SIZE - 2 : to.y >= 1\n\n        //同径二步\n        const doesNotHaveSameColumnFuhyou = new Array(MAX_SIZE).fill(0).every((_,i)=>{\n            if(i === to.y){\n                return true\n            }\n            const koma = board.getKoma(Coord.newCoord(to.x, i))\n            return !koma || koma.faction !== this.faction || koma.kind !== KomaKind.步兵\n        })\n        const attacked = board.getKoma( this.faction === Faction.Ou ? to.top() : to.bottom() )\n\n        //打步诘\n        const cannotCheckmate = !attacked || attacked.faction === this.faction || attacked.kind !== KomaKind.王将 && attacked.kind !== KomaKind.玉将\n        return doesNotHaveSameColumnFuhyou && isNotOnLastLine && cannotCheckmate\n    }\n    get kind(){\n        return KomaKind.步兵\n    }\n    get name(){\n        return \"步兵\"\n    }\n}\n\nexport class Narito extends Kinshou {\n    get kind(){\n        return KomaKind.成步\n    }\n    get name(){\n        return \"成步\"\n    }\n}","import { Faction, Coord, MAX_SIZE, Move, MoveKind, MoveResult, KomaKind, MoveMove, MoveEat, MoveUchikomu, UpgradeOption } from \"./interfaces\";\nimport { Koma, Kyousha, Keiba, Ginshou, Kinshou, Oushou, Kakugyou, Fuhyou, Hisha } from \"./koma\";\n\n\n\nexport class Board {\n    komadai = {\n        [Faction.Gyou]: [] as Koma[],\n        [Faction.Ou]:[] as Koma[],\n    }\n    board = [] as Koma[]\n    init(){\n        this.komadai[Faction.Gyou] = []\n        this.komadai[Faction.Ou] = []\n        \n        this.board = new Array(MAX_SIZE * MAX_SIZE).fill(null);\n        this.board.splice(0, MAX_SIZE, \n            new Kyousha(Faction.Ou),\n            new Keiba(Faction.Ou),\n            new Ginshou(Faction.Ou),\n            new Kinshou(Faction.Ou),\n            new Oushou(Faction.Ou),\n            new Kinshou(Faction.Ou),\n            new Ginshou(Faction.Ou),\n            new Keiba(Faction.Ou),\n            new Kyousha(Faction.Ou),\n        );\n        this.board[MAX_SIZE + 1] = new Kakugyou(Faction.Ou);\n        this.board[MAX_SIZE * 2 - 2] = new Hisha(Faction.Ou);\n        this.board.splice(MAX_SIZE * 2, MAX_SIZE, \n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n            new Fuhyou(Faction.Ou),\n        );\n        this.board.splice(MAX_SIZE * (MAX_SIZE - 1), MAX_SIZE, \n            new Kyousha(Faction.Gyou),\n            new Keiba(Faction.Gyou),\n            new Ginshou(Faction.Gyou),\n            new Kinshou(Faction.Gyou),\n            new Oushou(Faction.Gyou),\n            new Kinshou(Faction.Gyou),\n            new Ginshou(Faction.Gyou),\n            new Keiba(Faction.Gyou),\n            new Kyousha(Faction.Gyou),\n        );\n        this.board[MAX_SIZE * (MAX_SIZE - 2) + 1] = new Hisha(Faction.Gyou);\n        this.board[MAX_SIZE * (MAX_SIZE - 1) - 2] = new Kakugyou(Faction.Gyou);\n        this.board.splice(MAX_SIZE * (MAX_SIZE - 3), MAX_SIZE, \n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n            new Fuhyou(Faction.Gyou),\n        );\n    }\n    getKoma(coord: Coord): Koma | null {\n        return this.board[coord.y * MAX_SIZE + coord.x]\n    }\n    private killKoma(coord: Coord): Koma{\n        let koma = this.board[coord.y * MAX_SIZE + coord.x];\n        if(!koma){\n            throw new Error(\"Illegal Move!\")\n        }\n        delete this.board[coord.y * MAX_SIZE + coord.x];\n        koma = koma.downgrade()\n        koma.faction = koma.faction === Faction.Gyou ? Faction.Ou : Faction.Gyou;\n        this.komadai[koma.faction].push(koma)\n        return koma\n    }\n    private moveKoma(from: Coord, to:Coord){\n        this.board[to.y * MAX_SIZE + to.x] = this.board[from.y * MAX_SIZE + from.x]\n        this.board[from.y * MAX_SIZE + from.x] = null\n    }\n    upgradeKoma(coord: Coord){\n        const {to} = this.getKoma(coord).getPossibleUpgrade(coord);\n        this.board[coord.y * MAX_SIZE + coord.x] = to;\n    }\n    performMove(move: Move): MoveResult {\n        const koma = this.getKoma(move.from)\n\n        let mayUpgrade = true;\n\n        switch(true){\n            case move instanceof MoveMove:{\n                this.moveKoma(move.from,move.to);\n                break;\n            }\n            case move instanceof MoveEat:{\n                const killed = this.killKoma(move.to)\n                this.moveKoma(move.from,move.to);\n                if(killed.kind === KomaKind.玉将 || killed.kind === KomaKind.王将){\n                    return MoveResult.KO\n                }\n                break;\n            }\n            case move instanceof MoveUchikomu:{\n                mayUpgrade = false;\n                const coord = move.to;\n                const uchikomud = move.koma;\n                if(!!this.board[coord.y * MAX_SIZE + coord.x]){\n                    throw new Error(\"Invalid Action\")\n                }\n                const komaIndex = this.komadai[uchikomud.faction].findIndex(x=>x.kind === uchikomud.kind)\n                if(komaIndex === -1){\n                    throw new Error(\"Invalid Action\")\n                }\n                const [koma] = this.komadai[uchikomud.faction].splice(komaIndex, 1)\n                this.board[coord.y * MAX_SIZE + coord.x] = koma\n                break;\n            }\n        }\n\n        if(mayUpgrade){\n            const upgrade = koma.getPossibleUpgrade(move.to)\n            if(upgrade.kind === UpgradeOption.MustUpgrade){\n                this.upgradeKoma(move.to)\n            }else if(upgrade.kind === UpgradeOption.MayUpgrade){\n                return MoveResult.MayUpgrade\n            }\n        }\n        return MoveResult.Nothing\n    }\n    createMove(koma: Koma, from:Coord, to: Coord | null) : null | Move {\n        if(!to){\n            return null\n        }\n        const target = this.getKoma(to)\n        if(target){\n            if(target.faction !== koma.faction){\n                return new MoveEat(koma, from, to)\n            }else{\n                return null \n            }\n        }else{\n            return new MoveMove(koma, from, to)\n        }\n    }\n}","\nimport * as React from \"react\"\nimport {Board} from \"./board\"\nimport { MAX_SIZE, Coord, Move, Faction, MoveResult, MoveUchikomu } from \"./interfaces\"\nimport { Koma } from \"./koma\"\n\ntype Props = {\n\n}\n\nconst CELL_WIDTH = Math.min(window.innerWidth / 9, 50);\n\nexport default function Shogi (props:Props){\n\n    const [selected, setSelected] = React.useState(null as null | Coord)\n\n    const [moves, setMoves] = React.useState([] as Move[])\n\n    const board = React.useMemo(()=>{\n        const b = new Board()\n        b.init()\n        return b\n    },[])\n\n    const [turn, setTurn] = React.useState(Faction.Ou);\n\n    const [_a, _b] = React.useState(0)\n\n    const [uchikomu, setUchiKomu] = React.useState(null as null | Koma)\n\n    const refresh = ()=>{\n        _b(_a+1)\n    }\n\n    return <>\n        <p>\n            当前回合: 「{turn === Faction.Ou ? \"王将\" : \"玉将\"}」\n        </p>\n        <div style={{width: CELL_WIDTH  * MAX_SIZE }}>\n            {\n                new Array(MAX_SIZE).fill(0).map((_,revI)=>{\n                    const i = MAX_SIZE - 1 - revI\n                    return <div key={i} style={{display:\"flex\"}}>\n                        {\n                            new Array(MAX_SIZE).fill(0).map((_,j)=>{\n                                const coord = Coord.newCoord(j,i)\n                                const koma = board.getKoma(coord)\n                                const legalMove = uchikomu && !koma && uchikomu.canUchiKomu(coord, board) ? new MoveUchikomu(uchikomu, coord, coord) : moves.find(x=>x.to.eq(coord));\n\n                                return <div onClick={()=>{\n                                    if(legalMove){\n                                        const moveResult = board.performMove(legalMove)\n                                        switch (moveResult){\n                                            case MoveResult.KO:{\n                                                alert((turn === Faction.Ou ? \"王将\" : \"玉将\")+\"方获胜!\");\n                                                board.init();\n                                                setSelected(null)\n                                                setMoves([])\n                                                setTurn(turn === Faction.Ou ? Faction.Gyou : Faction.Ou);\n                                                refresh()\n                                                return;\n                                            }\n                                            case MoveResult.MayUpgrade:{\n                                                if(confirm(\"是否升级棋子?\")){\n                                                    board.upgradeKoma(coord)\n                                                }\n                                            }\n                                        }\n\n                                        setSelected(null)\n                                        setMoves([])\n                                        setUchiKomu(null)\n                                        setTurn(turn === Faction.Ou ? Faction.Gyou : Faction.Ou)\n                                        refresh()\n                                    }else if(koma && koma.faction === turn){\n                                        setSelected(coord)\n                                        const moves = koma.getPossibleMoves(coord,board)\n                                        setMoves(moves)\n                                        setUchiKomu(null)\n                                    }\n                                }} key={j} style={{\n                                    display:\"inline-flex\", \n                                    border:\".5px solid #999\", \n                                    cursor:\"pointer\", \n                                    width: CELL_WIDTH , \n                                    height:CELL_WIDTH , \n                                    transform: koma && koma.faction === Faction.Gyou ? \"rotate(180deg)\" : undefined,\n                                    justifyContent:\"center\", \n                                    alignItems:\"center\",\n                                    color: selected && selected.eq(coord) ? \"#00f9\" : undefined,\n                                    background: !!legalMove ? \"#0f03\": undefined\n                                }}>\n                                    {\n                                        koma && <KomaDisplay koma={koma} />\n                                    }\n                                </div>\n                            })\n                        }\n                    </div>\n                })\n            }\n        </div>\n        <div>\n            <p>驹台:</p>\n            <div style={{width: CELL_WIDTH  * MAX_SIZE / 2, display:\"inline-block\"}}>\n                王:\n                {\n                    board.komadai[Faction.Ou].map((x,i)=>{\n                        return <button onClick={()=>{\n                            if(turn === Faction.Ou){\n                                setUchiKomu(x)\n                            }\n                        }} key={i}>{x.name}</button>\n                    })\n                }\n            </div>\n            <div style={{width: CELL_WIDTH  * MAX_SIZE / 2, display:\"inline-block\"}}>\n                玉:\n                {\n                    board.komadai[Faction.Gyou].map((x,i)=>{\n                        return <button onClick={()=>{\n                            if(turn === Faction.Gyou){\n                                setUchiKomu(x)\n                            }\n                        }} key={i}>{x.name}</button>\n                    })\n                }\n            </div>\n        </div>\n    </>\n}\n\nfunction KomaDisplay({koma}:{koma:Koma}){\n    const name = koma.name\n    return <svg width={CELL_WIDTH} height={CELL_WIDTH} viewBox=\"0 0 50 50\">\n        <path stroke=\"#000\" fill=\"transparent\" d=\"M 5, 45 L 45, 45 L 40, 15 L 25 5 L 10, 15 L 5, 45\" />\n        <text textAnchor=\"middle\" fontSize={16} x={25} y={24}>\n            {name[0]}\n        </text>\n        <text textAnchor=\"middle\" fontSize={16} x={25} y={42}>\n            {name[1]}\n        </text>\n    </svg>\n}"],"sourceRoot":""}