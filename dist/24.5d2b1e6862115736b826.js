(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{"./src/routes/fractal/shaders/mandelbrot-set.glsl":function(n,o,t){"use strict";t.r(o),o.default="#version 300 es\nprecision highp float;\nuniform vec2 resolution;\nin vec3 vPos;\nin vec2 vUv;\nout vec4 color;\nuniform vec2 translate;\nuniform float zoom;\n\n//参数z控制循环次数\nuniform vec3 params;\nuniform float time;\n\nconst float limit = 2.0;\n\n#include <complex>\n\n// better smoothing http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-ii-lighting-and-coloring/\n// float smooth =  float(iteration) \n// + log(log(EscapeRadiusSquared))/log(Scale) \n// - log(log(dot(z,z)))/log(Scale);\n\nvec3 colorMapping(in float c, in float loop, in float maxIteration){\n\n    return mix(\n        step(2.0, loop) * vec3(\n            cos(c / 2.0),\n            cos(c / (params.x + 26.5)),\n            cos(c / (params.y + 150.0))\n        ),\n        vec3(1.0,1.0,1.0),\n        loop / maxIteration\n    );\n}\n\nvec3 mandelbrotSet(vec2 c){\n    float max_iter = params.z + 150.0;\n\n    int _maxIter = int(max_iter);\n    vec2 z = c;\n    float l = 0.0;\n    float loop = 0.0;\n    float h = 0.0;\n    for(int i=0; i<_maxIter; i++){\n        //修改这行来查看不同的图案!!!❤️\n        z = complexPow(z, 2.0) + c;\n        l = length(z);\n        loop += 1.0;\n        if(l > limit){\n            break;\n        }\n    }\n\n    // h = loop / float(maxIteration);\n\n    return colorMapping( log( l / pow(2.0, loop)), loop, max_iter );\n}\n\nvoid main(){\n    vec2 point = ( vUv.xy + translate / resolution ) * zoom * 2.0 - 1.0;\n    color = vec4(1.0 - mandelbrotSet(point), 1.0);\n}"}}]);
//# sourceMappingURL=24.5d2b1e6862115736b826.js.map