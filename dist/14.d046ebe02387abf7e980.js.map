{"version":3,"sources":["webpack:///./src/routes/demos/moonphase-painter/index.tsx"],"names":["phases","getBrightness","R","G","B","A","getMoonphaseChar","matrix","x","y","length","leftBrightness","middleBrightness","rightBrightness","output","str","width","height","scale","pre","document","querySelector","innerHTML","style","transform","outputMoonphaseText","map","join","getMoonphaseText","canvas","pixelSize","w","clientWidth","h","clientHeight","ctx","getContext","brightnessMatrix","i","j","brightness","getImageData","data","moonphaseMatrix","main","input","getElementById","addEventListener","e","file","files","glob","URL","createObjectURL","image","src","drawImage","pixels","getPixelSize","initImageToMoonphase","text","value","fontSizeEl","fontSize","Number","clearRect","fillStyle","font","textBaseline","fillText","initTextToMoonphase","MoonphasePainter","type","id","defaultValue","transformOrigin","whiteSpace","opacity","textOrientation"],"mappings":"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","file":"14.d046ebe02387abf7e980.js","sourcesContent":["import * as React from \"react\"\n\nconst phases = [\"üåë\",\"üåí\",\"üåì\",\"üåî\",\"üåï\",\"üåñ\",\"üåó\",\"üåò\"]\n\n// const root:HTMLDivElement = document.getElementById(\"root\")\n\n// const pixelSize = 2\n\nfunction getBrightness([R,G,B,A]:Uint8ClampedArray){\n    return (0.2126*R/255 + 0.7152*G/255 + 0.0722*B/255) * (A / 255)\n}\n\nfunction getMoonphaseChar(matrix:number[][],x:number,y:number){\n    if(matrix.length === 0 || x >= matrix.length - 2 || y >= matrix[0].length - 2){\n        return phases[0]\n    }\n    const leftBrightness = (matrix[x][y] + matrix[x][y+1] + matrix[x][y+2]) / 3\n    const middleBrightness = (matrix[x+1][y] + matrix[x+1][y+1] + matrix[x+1][y+2]) / 3\n    const rightBrightness = (matrix[x+2][y] + matrix[x+2][y+1] + matrix[x+2][y+2]) / 3\n\n    if(leftBrightness < 0.5){\n        if(middleBrightness >= 0.5){\n            return \"üåî\"\n        }else if(middleBrightness > 0.5){\n            return \"üåì\"\n        }else if(rightBrightness > 0.5){\n            return \"üåí\"\n        }else{\n            return \"üåë\"\n        }\n    }else{\n        if(middleBrightness < 0.5){\n            return \"üåò\"\n        }else if(middleBrightness <0.5){\n            return \"üåó\"\n        }else{\n            if (rightBrightness < 0.5){\n                return \"üåñ\"\n            }else{\n                return \"üåï\"\n            }\n        }\n    }\n}\n\nfunction getPixelSize(pixels:number){\n    if(pixels > 1000){\n        return 5\n    }else{\n        return 2\n    }\n}\n\nfunction initTextToMoonphase(){\n    const input = document.getElementById(\"text\") as HTMLInputElement\n    input.addEventListener(\"change\",(e)=>{\n        const text = input.value\n        const canvas = document.querySelector('canvas')\n        const ctx = canvas.getContext('2d')\n        const fontSizeEl = document.querySelector(\"#fontsize\") as HTMLInputElement\n        let fontSize = 20\n        fontSizeEl && (fontSize = Number(fontSizeEl.value))\n        canvas.width = fontSize\n        canvas.height = text.length * (fontSize)\n        ctx.clearRect(0,0,canvas.width,canvas.height)\n        ctx.fillStyle=\"#ffffff\"\n        ctx.font=fontSize + \"px Arial\"\n        ctx.textBaseline=\"top\"\n        for(let i=0;i<text.length;i++){\n            ctx.fillText(text[i],0, (fontSize) * i)\n        }\n        const matrix = getMoonphaseText(canvas, 1)\n        outputMoonphaseText(matrix,canvas.width * 10,canvas.height * 10, 1)\n    })\n}\n\nfunction initImageToMoonphase(){\n    const input = document.getElementById(\"file\") as HTMLInputElement\n    input.addEventListener(\"change\",(e)=>{\n        const files = input.files\n        const file = files[0]\n        if(file){\n            const glob = URL.createObjectURL(file)\n            const image = document.querySelector(\"#image\") as HTMLImageElement\n            image.src = glob\n            output('loading...',200,100)\n            image.addEventListener(\"load\",()=>{\n                const width = image.clientWidth\n                const height = image.clientHeight\n                const canvas = document.querySelector(\"canvas\")\n                const ctx = canvas.getContext(\"2d\")\n                canvas.height = height\n                canvas.width = width\n                ctx.drawImage(image,0,0)\n                output('generating...',200,100)\n                const pixelSize = getPixelSize(width)\n                const moonphaseMatrix = getMoonphaseText(canvas,pixelSize)\n                outputMoonphaseText(moonphaseMatrix,width,height)\n            })\n        }\n    })\n}\n\nfunction output(str:string,width:number,height:number,scale = 1){\n    const pre = document.querySelector('#output') as HTMLElement\n    pre.innerHTML = str\n    pre.style.transform=`scale(${scale})`\n    pre.style.height=height/scale+\"px\"\n    pre.style.width=width/scale+\"px\"\n}\n\nfunction outputMoonphaseText(matrix:string[][],width:number,height:number,scale=0.1){\n    output(matrix.map(x=>x.join(\"\")).join(\"\\n\"),width,height,scale)\n}\n\nfunction getMoonphaseText(canvas:HTMLCanvasElement, pixelSize:number){\n    const width = canvas.clientWidth\n    const height = canvas.clientHeight\n    const w = width / pixelSize\n    const h = height / pixelSize\n    const ctx = canvas.getContext(\"2d\")\n    let brightnessMatrix = []\n    for(let i = 0; i<w; i++){\n        brightnessMatrix[i] = []\n        for(let j=0; j<h; j++){\n            const pixelData = ctx.getImageData(i*pixelSize,j*pixelSize,pixelSize,pixelSize)\n            const color = pixelData.data\n            const brightness = getBrightness(color)\n            brightnessMatrix[i][j] = brightness\n        }\n    }\n    const moonphaseMatrix = []\n    for(let i=0;i<brightnessMatrix.length-2;i++){\n        for(let j=0;j<brightnessMatrix[i].length-2;j++){\n            if(!moonphaseMatrix[j])\n                moonphaseMatrix[j] = []\n            moonphaseMatrix[j][i] = getMoonphaseChar(brightnessMatrix,i,j)\n        }\n    }\n    return moonphaseMatrix\n}\n\nfunction main(){\n    initImageToMoonphase()\n    initTextToMoonphase()\n}\n\nexport default function MoonphasePainter(){\n    React.useEffect(()=>{\n        main()\n    },[])\n    return <div>\n        <section>\n            <div>\n                <label>\n                    image to moonphase ÂõæÁâá->ÊúàÁêÉÊñá\n                    <input type=\"file\" id=\"file\" />\n                </label>\n            </div>\n            <div>\n                <label>\n                    text to moonphase ÊñáÂ≠ó->ÊúàÁêÉÊñá\n                    <input type=\"text\" id=\"text\" />\n                </label>\n                <label>\n                    font size ÊñáÂ≠óÂ§ßÂ∞è\n                    <input type=\"number\" defaultValue=\"20\" id=\"fontsize\" />\n                </label>\n            </div>\n        </section>\n        <section id=\"output\" style={{transformOrigin: \"left top\", whiteSpace: \"pre\"}}>\n            \n        </section>\n        <canvas style={{opacity: 0, textOrientation: \"upright\"}}></canvas>\n        <img id=\"image\" style={{opacity: 0}} />\n    </div>\n}"],"sourceRoot":""}