{"version":3,"sources":["webpack:///./src/routes/demos/emoji-player/moonphase-player/moonphase-player.tsx","webpack:///./src/routes/demos/emoji-player/index.tsx"],"names":["getPixelSampleMatrix","file","pixelSize","canvas","image","document","createElement","src","URL","createObjectURL","Promise","resolve","onload","xDimension","width","yDimension","height","ctx","getContext","drawImage","res","i","row","j","pixel","getImageData","push","data","skintones","FPS","VIDEO_LENGTH","MoonphasePlayer","props","line","setLines","command","setCommand","ref","print","str","current","innerHTML","canvasRef","output","files","commands","mime","type","_","subtype","split","Subject","reject","reader","FileReader","readAsArrayBuffer","result","onerror","readFile","then","testData","Uint8Array","ffmpeg","Worker","postMessage","MEMFS","name","arguments","concat","addEventListener","e","next","terminate","complete","getFrames","sub","pipe","subscribe","x","startsWith","currentFrame","console","log","length","frames","outputIndex","blob","Blob","pixels","map","brightness","Math","min","floor","join","timer","setInterval","clearInterval","unsubscribe","style","whiteSpace","EmojiPlayer","setFile","fetch","accept","onChange","currentTarget"],"mappings":"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","file":"13.77ba108c0aa1b84fdacc.js","sourcesContent":["import * as React from \"react\";\nimport { Subject } from \"rxjs\";\n\nexport function getPixelSampleMatrix(file:Blob, pixelSize:number, canvas: HTMLCanvasElement){\n    const image = document.createElement(\"img\")\n    image.src = URL.createObjectURL(file)\n    return new Promise<Uint8ClampedArray[][]>(resolve=>{\n        image.onload=()=>{\n            const xDimension = image.width / pixelSize\n            const yDimension = image.height / pixelSize\n            canvas.height = image.height\n            canvas.width = image.width\n            const ctx = canvas.getContext('2d')\n            ctx.drawImage(image,0,0)\n            // console.log(`pixel size ${pixelSize}, image w ${image.width} h ${image.height}, dimension w ${xDimension} h ${yDimension}`)\n            let res:Uint8ClampedArray[][] = []\n            for(let i=0; i<yDimension; i++){\n                let row = []\n                for(let j=0;j<xDimension;j++){\n                    const pixel = ctx.getImageData(j*pixelSize,i*pixelSize,1,1)\n                    row.push(pixel.data)\n                }\n                res.push(row)\n            }\n            resolve(res)\n        }\n    })\n}\n\ntype Props = {\n    file:File\n}\n\nconst dictionary = [\"🌑\",\"🌒\",\"🌓\",\"🌔\",\"🌕\"] //,\"🌖\",\"🌗\",\"🌘\"]\n\nconst skintones = [\"🧑🏿\",\"🧑🏾\",\"🧑🏽\",\"🧑🏼\",\"🧑🏻\"]\n\nlet FPS = 30\n\nlet VIDEO_LENGTH = 30\n\nexport default function MoonphasePlayer (props:Props){\n    const [line,setLines] = React.useState([] as React.ReactNode[])\n    // const [printed,print] = React.useState(null as React.ReactNode)\n    const [command,setCommand] = React.useState(`-ss 00:00:00 -i input.webm -vframes ${FPS * VIDEO_LENGTH} output-%03d.jpg`)\n\n    const ref = React.useRef(null)\n\n    const print = (str:string)=>{\n        ref.current && (ref.current.innerHTML = str)\n    }\n\n    const canvasRef = React.useRef(null)\n\n    React.useEffect(()=>{\n        if(!props.file || !command){\n            return\n        }\n        setLines([])\n        print(\"loading..., please wait.\")\n        const {output,files} = getFrames(props.file, command.split(\" \")) \n        const sub = output.pipe(\n            // map(({type,data})=>{\n                \n                // return <span style={{\n                //     color:type==='stderr'?\"red\":type===\"stdout\"?\"black\":\"gray\",\n                //     display:\"block\",\n                // }}>\n                //     {data}    \n                // </span>\n            // }),\n            // scan((a:React.ReactNode[],b:React.ReactNode)=>a.concat(b),[] as React.ReactNode[])\n        ).subscribe(x=>{\n            // if(process.env.NODE_ENV === 'development'){\n            if(x.data && x.data.startsWith(\"frame=\")){\n                const [_,currentFrame] = x.data.split(/\\s+/g)\n                print(`${currentFrame}/900`)\n            }\n            // console.log(x.data)\n            // }\n        })\n        \n        // const sub = new Subscription()\n\n        // const frame$ = new Subject<React.ReactNode>()\n\n        files.subscribe(async (files)=>{\n            console.log(`got ${files.length} images`)\n            let frames:string[] = [];\n            let outputIndex = null as null | number;\n            for(let i in files){\n                const file = files[i]\n                const blob = new Blob([file.data],{type:\"image/jpeg\"})\n                const pixels = await getPixelSampleMatrix(blob,20, canvasRef.current)\n                frames.push(pixels.map(row=>{\n                    return row.map(pixel=>{\n                        const brightness = (0.2126*pixel[0]/255 + 0.7152*pixel[1]/255 + 0.0722*pixel[2]/255) * 2\n                        return skintones[Math.min(Math.floor(brightness * skintones.length),skintones.length-1)]\n                        \n                        // return `<span class=\"pixel\" style=\"background: rgba(${pixel.join(\",\")})\"></span>`\n                    }).join(\"\")\n                }).join(\"\\n\"))\n                if(outputIndex === null){\n                    outputIndex = 0\n                    let timer = setInterval(()=>{\n                        if(outputIndex>frames.length - 1){\n                            // frame$.next(frames[frames.length-1])\n                            print(frames[frames.length-1])\n                        }else{\n                            // frame$.next(frames[outputIndex])\n                            print(frames[frames.length-1])\n                            outputIndex ++\n                        }\n                        if(outputIndex === files.length){\n                            clearInterval(timer)\n                            // frame$.complete()\n                        }\n                    },1000/FPS)\n                }\n            }\n        })\n\n        // sub.add(frame$.subscribe(print))\n\n        return ()=>sub.unsubscribe()\n\n    },[props.file,command])\n\n    return <div>\n        Can Only Play the first 900 frames.\n        {\n            // <input type=\"search\" style={{width:500}} defaultValue=\"-ss 00:00:01 -i input.webm -vframes 12 output-%03d.jpg\" onKeyDown={e=>{\n            //     if(e.key==='Enter'){\n            //         setCommand(e.currentTarget.value) \n            //     }\n            // }} />\n        }\n        <div>\n            {\n                // line.map((x,i)=>{\n                //     return <span key={i}>\n                //         {x}\n                //     </span>\n                // })\n            }\n        </div>\n        <style>\n            {`.pixel{\n                display:inline-block;\n                width:10px;\n                height:10px;\n            }`}\n        </style>\n        <div ref={ref} style={{whiteSpace:\"pre-wrap\"}}>\n\n        </div>\n        <canvas ref={canvasRef} />\n    </div>\n}\n\nfunction readFile(file:File){\n    return new Promise<ArrayBuffer>((resolve,reject)=>{\n        const reader = new FileReader()\n        reader.readAsArrayBuffer(file)\n        reader.onload=()=>{\n            resolve(reader.result as ArrayBuffer)\n        }\n        reader.onerror=reject\n    })\n}\n\nfunction getFrames(file:File, commands:string[]){\n    const mime = file.type\n    const [_,subtype] = mime.split(\"/\")\n    const output = new Subject<{type:\"stdout\"|\"stderr\",data:string}>()\n    const files = new Subject<{name:string,data:Uint8Array}[]>()\n    readFile(file).then((data)=>{\n        var testData = new Uint8Array(data)\n        let ffmpeg = \n            subtype === 'webm' ? new Worker(\"assets/ffmpeg.js/ffmpeg-worker-webm.js\") : \n            subtype === 'mp4' ? new Worker(\"assets/ffmpeg.js/ffmpeg-worker-mp4.js\") : \n            null\n        if(!ffmpeg){\n            return []\n        }\n    \n        ffmpeg.postMessage({\n            type:\"run\",\n            MEMFS: [{name: `input.${subtype}`, data: testData}],\n            arguments: commands.concat('-hide_banner')\n        })\n\n        let i = 0\n        // Write out.webm to disk.\n        ffmpeg.addEventListener('message',e=>{\n            // console.log(e.data.type)\n            if(e.data.type === 'exit'){\n                // console.log('exit',e.data.data)\n            }else if(e.data.type==='done'){\n                // console.log(`done`, e.data.data)\n                files.next(e.data.data.MEMFS)\n                ffmpeg.terminate()\n                files.complete()\n                output.complete()\n            }else{\n                output.next(e.data)\n            }\n        })\n    })\n    return {output,files}\n}","import * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\nimport MoonphasePlayer from \"./moonphase-player/moonphase-player\";\nimport VideoVisualizer from \"./visualizer/visualizer\";\n\nexport default function EmojiPlayer(){\n    // if(location.hostname === 'localhost'){\n    //     return <VideoVisualizer />\n    // }\n    const [file,setFile] = React.useState(null as null | File)\n    React.useEffect(()=>{\n        fetch(\"assets/big_buck_bunny.webm\").then(x=>x.blob() as any).then(setFile)\n    },[])\n    return <div>\n        {\n            <input type=\"file\" accept=\"video/webm\" onChange={(e)=>{\n                if(!e.currentTarget.files){\n                    return\n                }\n                const file = e.currentTarget.files[0]\n                if(file){\n                    setFile(file)\n                    // let promise\n                    // if(file.type.includes('mp4'))\n                    //     promise = parseMp4File()\n                    // else if(file.type.includes('flv'))\n                    //     promise = parseFlvFile()\n                    // else\n                    //     return\n                    // promise.then(this.setState.bind(this))\n                }\n            }} />\n        }\n        { file ? <MoonphasePlayer file={file} /> : null }\n    </div>\n}"],"sourceRoot":""}